##################################  Bubble Sort #######################################

void bubble_sort(vector<int> & arr )
{
   for(int i =0; i < arr.size() -1; i++){
      for(int j =0; j < arr.size() -1 -i; j++)
       if (arr[j] > arr[j + 1])               // every time compare two numbers. 
        swap(arr[j], arr[j+1]);
  }
}


##################################  Quick Sort ##########################################

int partition(int * arr, int font, int end)
{
  int pivot =arr[end];                       // select end as a reference to compare
  int i = font -1;
  for(int j=font; j < end; j++)
       if(arr[j] < pivot){                   // if element is smaller than pivot, then switch 
          i++;
         swap(arr[i], arr[j]); 
       }
      i++;
      swap(arr[i], arr[end]);                // it needs to change back 
      return i;
}

void quick_sort(int* arr, int font, int end)
{
  if(font< end){
   int pivot = partition(arr, font, end);
   quicksort(arr, font  , pivot-1);
   quicksort(arr, pivot , end);
  
  }
}

##################################  Selection Sort ######################################

int selection_sort (int * arr)
{
 if(int i =0; i< arr.size(); i++){
 int min =i ;                             // assume the min is the first element 
 
 for(int j =i+1; j< arr.size(); j++){
   if(arr[min] > arr[j])
       min = j;
 }
 if(min != i)
   swap(arr[min], arr[i]);
}

}

##################################  Heap Sort ############################################

void  heapify (int arr[], int root){

 int biggest_num = root;
 int left  = 2*arr.size()+1;
 int right = 2*arr.size()+2;
 
 if(arr[left] >arr[biggest_num])
     biggest_num =left;
     
 if(arr[right] >arr[biggest_num])
     biggest_num =right;  

 if(biggest_num != root){
     sawp(arr[root], arr[biggest_num]);
     heapify (arr, biggest_num);              //if the  biggest_num is not root, call heapify and search again until root is 
                                              //biggest_num 
 }
}

void create_heap(int arr[])
{
for(int i= arr.size()/2-1; i >=0; i--)        // find a parent node (n/2-1) and send to the heapify function
 heapify(arr, i);

}

void heap_sort(int arr[])
{
create_heap(arr);

for(int i = arr.size()-1; i >= 0; i-- ){      //change maximum value to the leaf and heapify the rest of nodes
     swap(a[0],a[i]);
     heapify(arr, 0);
}

}

##################################  Insertion Sort ######################################
void insertion_sort (int arr[])
{
   int cur, pre, std;
   for(int i =0; i < arr.size(); i++ ){
       std = arr[i];                                  //select i as a standard to compare
       cur = i;
       pre = cur - 1;
       
    while(pre> 0 && arr[pre] > std)
    {
        arr[pre+1] = arr[pre] ;
        prev--;
    }
    arr[pre+1] =std;

}

}
##################################  Merge Sort ######################################
void merge_sort(int* arr, int start, int end )
{
int mid;
if(end> start){
   mide =(start+ end)/2;
   merge_sort(arr, start  , mid);
   merge_sort(arr, mid + 1, end);
   merge(arr, start, end  , mid);
}
}


void merge(arr, start ,end, mid)
{

int i, k,  j = mid + 1, tmp[100];

while(i<=mid && j<=high){
  if(arr[i] > arr[j])
       tmp[k] =a[i]; i++; 
  else
       tmp[k] =a[j]; j++; 
    k++;
}
  
while(i<=mid){ tmp[k] =arr[i]; k++; i++;}
while(j<=end){ tmp[k] =arr[j]; k++; j++;}

}


##################################  Shell Sort ######################################

int shellSort(int arr[], int n)
{
    
    for (int gap = n/2; gap > 0; gap /= 2)
    {
        // Do a gapped insertion sort for this gap size.
        // The first gap elements a[0..gap-1] are already in gapped order
        // keep adding one more element until the entire array is
        // gap sorted 
        for (int i = gap; i < n; i += 1)
        {
            // add a[i] to the elements that have been gap sorted
            // save a[i] in temp and make a hole at position i
            int temp = arr[i];
 
            // shift earlier gap-sorted elements up until the correct 
            // location for a[i] is found
            int j;            
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap)
                arr[j] = arr[j - gap];
             
            //  put temp (the original a[i]) in its correct location
            arr[j] = temp;
        }
    }
    return 0;
}

